<?php

/**
 * @file
 * Contains bt_image.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_help().
 */
function bt_image_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the bt_image module.
    case 'help.page.bt_image':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Btester Image') . '</p>';

      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function bt_image_theme() {
  return [
    'bt_image' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function bt_image_media_insert(EntityInterface $entity) {
  // Convert to lowercase, trim spaces,
  // replace spaces with underscore and then truncate to 60 chars.
  $pathTitle = substr(str_replace(" ", "-", trim(strtolower($entity->label()))), 0, 60);

  if ($entity->bundle() == 'image') {
    \Drupal::service('path.alias_storage')->save("/media/" . $entity->id() . '/edit', "/image/" . $pathTitle . '/edit', "en");
    \Drupal::service('path.alias_storage')->save("/media/" . $entity->id() . '/delete', "/image/" . $pathTitle . '/delete', "en");
    \Drupal::service('path.alias_storage')->save("/media/" . $entity->id() . '/latest', "/image/" . $pathTitle . '/latest', "en");
  }
}

/**
 * Implements hook_entity_bundle_field_info().
 */
function bt_image_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle) {
  if ($entity_type->id() == 'media' && $bundle == 'image') {
    $fields = array();
    $fields['name'] = BaseFieldDefinition::create('string');
    $fields['name']->setLabel(t('Image name'))
      ->setDescription(t('The name by which you will identify the image in your media library.'));

    $fields['name']->setRequired(TRUE)
      ->setTranslatable(TRUE)
      ->setRevisionable(TRUE)
      ->setDefaultValue('')
      ->setSetting('max_length', 255)
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => -5,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'type' => 'string',
        'weight' => -5,
      ])
      ->setDisplayConfigurable('view', TRUE);

    return $fields;
  }

}
